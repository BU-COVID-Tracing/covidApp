{"version":3,"file":"Info.plist.js","sourceRoot":"","sources":["../../src/ios/Info.plist.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,gDAAwB;AAExB,mEAA2C;AAC3C,sDAAoD;AAEpD,MAAM,oBAAoB,GAAG,YAAY,CAAC;AAE1C;;GAEG;AACY,KAAK,UAAU,kBAAkB,CAAC,cAAsB;IACrE,MAAM,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;IACpE,MAAM,WAAW,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzD,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI,sBAAY,CAAkB,WAAW,CAAC;SACzE,WAAW,CAAC,OAAO,CAAC,EAAE;QACrB,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,wBAAO,CAAC,OAAO,EAAE;YAC/C,cAAc,EAAE,+BAA+B;YAC/C,cAAc,EAAE,uEAAuE;SACxF,CAAC,CAAC;QACH,OAAO,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC,CAAC;SACD,WAAW,CAAC,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;QACrC,IAAI,QAAQ,EAAE;YACZ,OAAO,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;SACrC;QACD,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,uBAAM,CACpC,OAAO,EACP;YACE,aAAa,EAAE,wEAAwE;YACvF,aAAa,EAAE,YAAY;SAC5B,EACD,IAAI,CACL,CAAC;QACF,OAAO,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IACL,MAAM,kBAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC3C,CAAC;AA1BD,qCA0BC","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport StateManager from '../StateManager';\nimport { replace, insert } from '../string-helpers';\n\nconst INFO_PLIST_FILE_PATH = 'Info.plist';\n\n/**\n * Configures [INFO_PLIST] to show [STORYBOARD] filename as Splash/Launch Screen.\n */\nexport default async function configureInfoPlist(iosProjectPath: string) {\n  const filePath = path.resolve(iosProjectPath, INFO_PLIST_FILE_PATH);\n  const fileContent = await fs.readFile(filePath, 'utf-8');\n  const { state: newContent } = new StateManager<string, boolean>(fileContent)\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replaceContent: '<string>SplashScreen</string>',\n        replacePattern: /(?<=<key>UILaunchStoryboardName<\\/key>(.|\\n)*?)<string>.*?<\\/string>/m,\n      });\n      return [newContent, 'replaced', succeeded];\n    })\n    .applyAction((content, { replaced }) => {\n      if (replaced) {\n        return [content, 'inserted', false];\n      }\n      const [succeeded, newContent] = insert(\n        content,\n        {\n          insertContent: `  <key>UILaunchStoryboardName</key>\\n  <string>SplashScreen</string>\\n`,\n          insertPattern: /<\\/dict>/gm,\n        },\n        true\n      );\n      return [newContent, 'inserted', succeeded];\n    });\n  await fs.writeFile(filePath, newContent);\n}\n"]}