{"version":3,"sources":["CardStack.tsx"],"names":["React","Animated","StyleSheet","Dimensions","Platform","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","HeaderShownContext","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","style","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","isScreensEnabled","OS","isParentHeaderShown","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","container","handleLayout","focused","isScreenActive","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","headerHeight","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Route,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousRoute,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const previousRoute = getPreviousRoute({\n                    route: scene.route,\n                  });\n\n                  let previousScene = scenes[index - 1];\n\n                  if (previousRoute) {\n                    // The previous scene will be shortly before the current scene in the array\n                    // So loop back from current index to avoid looping over the full array\n                    for (let j = index - 1; j >= 0; j--) {\n                      const s = scenes[j];\n\n                      if (s && s.route.key === previousRoute.key) {\n                        previousScene = s;\n                        break;\n                      }\n                    }\n                  }\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        previousScene={previousScene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousRoute={getPreviousRoute}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}