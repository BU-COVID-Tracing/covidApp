{"version":3,"sources":["BottomTabBar.tsx"],"names":["React","View","Animated","StyleSheet","Keyboard","Platform","Dimensions","NavigationContext","NavigationRouteContext","CommonActions","useTheme","useLinkBuilder","useSafeArea","BottomTabItem","DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","OS","BottomTabBar","state","navigation","descriptors","activeBackgroundColor","activeTintColor","adaptive","allowFontScaling","inactiveBackgroundColor","inactiveTintColor","keyboardHidesTabBar","labelPosition","labelStyle","safeAreaInsets","showIcon","showLabel","style","tabStyle","colors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","isKeyboardShown","setIsKeyboardShown","useState","shouldShowTabBar","tabBarVisible","isTabBarHidden","setIsTabBarHidden","visible","Value","useEffect","timing","toValue","duration","start","finished","dimensions","setDimensions","height","width","get","handleOrientationChange","window","addEventListener","handleKeyboardShow","handleKeyboardHide","addListener","removeEventListener","removeListener","layout","setLayout","handleLayout","e","nativeEvent","shouldUseHorizontalLabels","maxTabItemWidth","flattenedStyle","flatten","maxWidth","length","isLandscape","defaultInsets","insets","top","right","bottom","left","styles","tabBar","backgroundColor","card","borderTopColor","border","transform","translateY","interpolate","inputRange","outputRange","position","paddingBottom","paddingHorizontal","Math","max","content","map","route","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","navigate","name","onLongPress","label","tabBarLabel","undefined","title","accessibilityLabel","tabBarAccessibilityLabel","params","tabBarTestID","tabBarButton","tabBarIcon","create","borderTopWidth","hairlineWidth","elevation","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Keyboard,\n  Platform,\n  LayoutChangeEvent,\n  ScaledSize,\n  Dimensions,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 50;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  safeAreaInsets,\n  showIcon,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    if (shouldShowTabBar) {\n      Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver,\n      }).start();\n    }\n  }, [shouldShowTabBar, visible]);\n\n  const [dimensions, setDimensions] = React.useState(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', handleOrientationChange);\n\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      const isLandscape = dimensions.width > dimensions.height;\n\n      return isLandscape;\n    }\n  };\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [layout.height + insets.bottom, 0],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : null,\n        },\n        {\n          height: DEFAULT_TABBAR_HEIGHT + insets.bottom,\n          paddingBottom: insets.bottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={shouldUseHorizontalLabels()}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  label={label}\n                  showIcon={showIcon}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]}