{"version":3,"sources":["NavigationContainer.tsx"],"names":["NavigationContainer","React","forwardRef","ref","theme","DefaultTheme","linking","fallback","rest","isLinkingEnabled","enabled","refContainer","useRef","getInitialState","prefixes","isReady","initialState","useImperativeHandle","current","linkingContext","useMemo","options"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;AAYA,MAAMA,mBAAmB,GAAGC,KAAK,CAACC,UAAN,CAAiB,SAASF,mBAAT,OAE3CG,GAF2C,EAG3C;AAAA,MAFA;AAAEC,IAAAA,KAAK,GAAGC,qBAAV;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA,QAAQ,GAAG;AAA5C,GAEA;AAAA,MAFqDC,IAErD;;AACA,QAAMC,gBAAgB,GAAGH,OAAO,GAAGA,OAAO,CAACI,OAAR,KAAoB,KAAvB,GAA+B,KAA/D;AAEA,QAAMC,YAAY,GAAGV,KAAK,CAACW,MAAN,CAAqC,IAArC,CAArB;AAEA,8BAAcD,YAAd;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAAsB,yBAAWF,YAAX;AAC1BD,IAAAA,OAAO,EAAED,gBADiB;AAE1BK,IAAAA,QAAQ,EAAE;AAFgB,KAGvBR,OAHuB,EAA5B;AAMA,QAAM,CAACS,OAAD,EAAUC,YAAV,IAA0B,0BAAYH,eAAZ,CAAhC;AAEAZ,EAAAA,KAAK,CAACgB,mBAAN,CAA0Bd,GAA1B,EAA+B,MAAMQ,YAAY,CAACO,OAAlD;AAEA,QAAMC,cAAc,GAAGlB,KAAK,CAACmB,OAAN,CAAc,OAAO;AAAEC,IAAAA,OAAO,EAAEf;AAAX,GAAP,CAAd,EAA4C,CAACA,OAAD,CAA5C,CAAvB;;AAEA,MAAIE,IAAI,CAACQ,YAAL,IAAqB,IAArB,IAA6BP,gBAA7B,IAAiD,CAACM,OAAtD,EAA+D;AAC7D;AACA;AACA,WAAOR,QAAP;AACD;;AAED,sBACE,oBAAC,uBAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEY;AAAhC,kBACE,oBAAC,sBAAD;AAAe,IAAA,KAAK,EAAEf;AAAtB,kBACE,oBAAC,6BAAD,eACMI,IADN;AAEE,IAAA,YAAY,EACVA,IAAI,CAACQ,YAAL,IAAqB,IAArB,GAA4BA,YAA5B,GAA2CR,IAAI,CAACQ,YAHpD;AAKE,IAAA,GAAG,EAAEL;AALP,KADF,CADF,CADF;AAaD,CAzC2B,CAA5B;eA2CeX,mB","sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useBackButton from './useBackButton';\nimport { Theme, LinkingOptions } from './types';\n\ntype Props = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions;\n  fallback?: React.ReactNode;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = React.forwardRef(function NavigationContainer(\n  { theme = DefaultTheme, linking, fallback = null, ...rest }: Props,\n  ref?: React.Ref<NavigationContainerRef | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  const refContainer = React.useRef<NavigationContainerRef>(null);\n\n  useBackButton(refContainer);\n\n  const { getInitialState } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  const [isReady, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  if (rest.initialState == null && isLinkingEnabled && !isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n});\n\nexport default NavigationContainer;\n"]}