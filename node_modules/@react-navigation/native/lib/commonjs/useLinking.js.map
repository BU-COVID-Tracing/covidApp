{"version":3,"sources":["useLinking.tsx"],"names":["createMemoryHistory","index","items","pending","history","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","replaceState","go","n","Math","min","max","Promise","resolve","done","removeEventListener","requestAnimationFrame","addEventListener","listen","listener","onPopState","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","cb","handling","queue","callback","unshift","last","pop","isUsingLinking","useLinking","ref","enabled","config","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","React","useEffect","Error","join","trim","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","current","server","useContext","ServerContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousStateRef","pendingPopStatePathRef","navigation","recordedState","resetRoot","action","dispatch","getRootState","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","currentIndex","addListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n  getActionFromState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Whether there's a `history.go(n)` pending\n  let pending = false;\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index]?.state;\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the index\n        // Otherwise we'll exit the page\n        n = Math.max(n, -Math.max(index + 1, 1));\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      return new Promise((resolve) => {\n        pending = true;\n\n        const done = () => {\n          pending = false;\n\n          window.removeEventListener('popstate', done);\n          resolve();\n        };\n\n        // Resolve the promise in the next frame\n        // If `popstate` hasn't fired by then, then it wasn't handled\n        requestAnimationFrame(() => requestAnimationFrame(done));\n\n        window.addEventListener('popstate', done);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    // Make it a thenable to keep consistent with the native impl\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const recordedState = history.get(history.index);\n\n      if (recordedState) {\n        navigation.resetRoot(recordedState);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      if (previousStateRef.current === undefined) {\n        previousStateRef.current = state;\n      }\n\n      history.replace({ path, state });\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          if (nextIndex !== -1 && nextIndex < currentIndex) {\n            // An existing entry for this path exists and it's less than current index, go back to that\n            await history.go(nextIndex - currentIndex);\n          } else {\n            // We couldn't find an existing entry to go back to, so we'll go back by the delta\n            // This won't be correct if multiple routes were pushed in one go before\n            // Usually this shouldn't happen and this is a fallback for that\n            await history.go(historyDelta);\n          }\n\n          // Store the updated state as well as fix the path if incorrect\n          history.replace({ path, state });\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]}