{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","screen","route","navigation","getState","setState","options","navigatorKeyRef","React","useRef","getKey","useCallback","current","optionsRef","useEffect","getOptions","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const optionsRef = React.useRef<object | undefined>(options);\n\n  React.useEffect(() => {\n    optionsRef.current = options;\n  }, [options]);\n\n  const getOptions = React.useCallback(() => optionsRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    getOptions,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      addOptionsGetter,\n    }),\n    [\n      getCurrentState,\n      getKey,\n      route.state,\n      setCurrentState,\n      setKey,\n      addOptionsGetter,\n    ]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]}