{"version":3,"sources":["useOnGetState.tsx"],"names":["React","NavigationBuilderContext","NavigationRouteContext","isArrayEqual","useOnGetState","getStateForRoute","getState","addStateGetter","useContext","route","key","getRehydratedState","useCallback","state","routes","map","childState","useEffect"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,SAASC,aAAT,CAAuB;AACpCC,EAAAA,gBADoC;AAEpCC,EAAAA;AAFoC,CAAvB,EAMZ;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAqBP,KAAK,CAACQ,UAAN,CAAiBP,wBAAjB,CAA3B;AACA,QAAMQ,KAAK,GAAGT,KAAK,CAACQ,UAAN,CAAiBN,sBAAjB,CAAd;AACA,QAAMQ,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACC,GAAT,GAAe,MAAhC;AAEA,QAAMC,kBAAkB,GAAGX,KAAK,CAACY,WAAN,CAAkB,MAAM;AACjD,UAAMC,KAAK,GAAGP,QAAQ,EAAtB,CADiD,CAGjD;;AACA,UAAMQ,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAkBN,KAAD,IAAW;AACzC,YAAMO,UAAU,GAAGX,gBAAgB,CAACI,KAAK,CAACC,GAAP,CAAnC;;AAEA,UAAID,KAAK,CAACI,KAAN,KAAgBG,UAApB,EAAgC;AAC9B,eAAOP,KAAP;AACD;;AAED,6CAAYA,KAAZ;AAAmBI,QAAAA,KAAK,EAAEG;AAA1B;AACD,KARc,CAAf;;AAUA,QAAIb,YAAY,CAACU,KAAK,CAACC,MAAP,EAAeA,MAAf,CAAhB,EAAwC;AACtC,aAAOD,KAAP;AACD;;AAED,2CAAYA,KAAZ;AAAmBC,MAAAA;AAAnB;AACD,GAnB0B,EAmBxB,CAACR,QAAD,EAAWD,gBAAX,CAnBwB,CAA3B;AAqBAL,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,WAAOV,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAGG,GAAH,EAAQC,kBAAR,CAArB;AACD,GAFD,EAEG,CAACJ,cAAD,EAAiBI,kBAAjB,EAAqCD,GAArC,CAFH;AAGD","sourcesContent":["import * as React from 'react';\nimport { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\nexport default function useOnGetState({\n  getStateForRoute,\n  getState,\n}: {\n  getStateForRoute: (routeName: string) => NavigationState | undefined;\n  getState: () => NavigationState;\n}) {\n  const { addStateGetter } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateForRoute(route.key);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateForRoute]);\n\n  React.useEffect(() => {\n    return addStateGetter?.(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}\n"]}